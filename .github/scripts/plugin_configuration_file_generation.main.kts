#!/usr/bin/env kotlin

// Copyright 2000-2024 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

/**
 * Generates the elements content for the plugin_configuration_file.md page.
 * It fetches the elements data from <TODO>.
 */

@file:DependsOn("org.yaml:snakeyaml:2.3")

import org.yaml.snakeyaml.LoaderOptions
import org.yaml.snakeyaml.Yaml
import org.yaml.snakeyaml.constructor.Constructor

import java.io.File
import java.net.URL
import java.time.LocalDate

val PLUGIN_DESCRIPTOR_DATA_URL =
  "file:///Users/karol.lewandowski/IdeaProjects/intellij-sdk-docs/.github/scripts/plugin-descriptor.yaml" // FIXME: url
val GENERATED_OUTPUT_FILE_PATH = "topics/_generated/plugin_configuration_content.md"

val content = URL(PLUGIN_DESCRIPTOR_DATA_URL).readText()
  .run {
    val loaderOptions = LoaderOptions().apply {
      isEnumCaseSensitive = false
    }
    val constructor = Constructor(Content::class.java, loaderOptions)
    Yaml(constructor).load<Content>(this)
  }
  .takeIf { it?.elements != null }
  ?: throw RuntimeException("Failed to parse $PLUGIN_DESCRIPTOR_DATA_URL")

file(GENERATED_OUTPUT_FILE_PATH).writeText(renderContent(content))

fun renderContent(content: Content): String {
  val sb = StringBuilder()
  sb.appendLine("<!-- Copyright 2000-${LocalDate.now().year} JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license. -->\n")
  sb.appendLine("<!-- This file is generated by plugin_configuration_file.main.kts. -->")
  sb.appendLine("<!-- DO NOT EDIT IT MANUALLY -->\n")
  sb.appendLine("# Plugin Configuration File Snippet")
  sb.appendLine("{is-library=\"true\"}\n")
  sb.appendLine("<snippet id=\"plugin_configuration_content\">\n")
  sb.appendContentHierarchy(content)
  sb.appendContentElements(content)
  sb.appendLine("\n</snippet>")
  return sb.toString()
}

fun StringBuilder.appendContentHierarchy(content: Content) {
  appendElementsHierarchy(content.elements, level = 0, parentPath = "")
}

fun StringBuilder.appendElementsHierarchy(elements: List<Element>, level: Int, parentPath: String) {
  for (element in elements) {
    val elementSectionLink = element.getPath(parentPath)
    appendHierarchyLink(element, level, elementSectionLink)
    appendElementsHierarchy(element.children, level + 1, elementSectionLink)
  }
}

fun StringBuilder.appendHierarchyLink(element: Element, level: Int, elementSectionLink: String) {
  appendLine(
    """${"  ".repeat(level)}- [`<${element.name}>`](#$elementSectionLink)"""
  )
}

fun StringBuilder.appendContentElements(content: Content) {
  appendElements(content.elements, level = 0, parentPath = "")
}

fun StringBuilder.appendElements(elements: List<Element>, level: Int, parentPath: String) {
  for (element in elements) {
    appendElement(element, level, parentPath)
  }
}

fun StringBuilder.appendElement(element: Element, level: Int, parentPath: String) {
  val elementSectionLink = element.getPath(parentPath)
  appendSectionHeader(element.name, level, elementSectionLink)
  appendReferences(element.references)
  element.description?.trim()?.let { appendLine("$it\n") }
  appendRequirement(element.requirement)
  appendDefaultValue(element.defaultValue)
  appendAttributes(element.attributes)
  appendChildrenList(element.children, elementSectionLink)
  appendExamples(element.examples)

  appendElements(element.children, level + 1, elementSectionLink)
}

fun StringBuilder.appendSectionHeader(elementName: String?, level: Int, elementSectionLink: String) {
  appendLine("\n##${"#".repeat(level)} `${elementName}`")
  appendLine("{#$elementSectionLink}\n")
}

fun StringBuilder.appendNotNull(value: String?) {
  value?.let { appendLine(it) }
}

fun StringBuilder.appendReferences(references: List<String>) {
  if (references.isEmpty()) return
  appendLine("<tldr>\n")
  append("**Reference:** ${references.joinToString()}")
  appendLine("\n</tldr>\n")
}

fun StringBuilder.appendRequirement(requirement: Requirement?) {
  if (requirement == null) return
  appendLine("{style=\"narrow\"}")
  appendLine("Required")
  append(": ").appendLine(when (requirement.required) {
    Required.YES -> "**yes**"
    Required.NO -> "no"
    Required.YES_FOR_PAID -> "only for paid or freemium plugins"
  })
  val requirementDetails = requirement.details
  if (requirementDetails.isNotEmpty()) {
    append("; ")
    for ((index, detail) in requirementDetails.withIndex()) {
      append(detail.trim()).appendLine(if (index != requirementDetails.lastIndex) "<br/>" else "")
    }
  }
}

fun StringBuilder.appendDefaultValue(defaultValue: String?) {
  if (defaultValue == null) return
  appendLine("\nDefault value")
  appendLine(": $defaultValue")
}

fun StringBuilder.appendAttributes(attributes: List<Attribute>?) {
  if (attributes == null) return
  if (attributes.isNotEmpty()) {
    appendLine("\nAttributes")
    appendLine(":")
    for (attribute in attributes) {
      appendAttribute(attribute)
    }
  }
}

fun StringBuilder.appendAttribute(attribute: Attribute) {
  append("- `${attribute.name}`")
  append(" _(")
  append(when (attribute.required) {
    Required.YES -> "**required**"
    Required.NO -> "optional"
    Required.YES_FOR_PAID -> "required for paid or freemium plugins"
  })
  attribute.requiredDetails?.let { append("; ${it.trim()}") }
  appendLine(")_<br/>")
  attribute.description?.trim()?.let { append(it.indentLines(level = 1)) }
  attribute.defaultValue?.trim()?.let {
    appendLine("<br/>")
    append("Default value: `$it`.".indentLines(level = 1))
  }
  appendLine()
}

fun StringBuilder.appendChildrenList(elements: List<Element>?, parentPath: String) {
  if (elements == null) return
  appendChildrenList("Children", elements.filter { it.deprecated != true }, parentPath)
  appendChildrenList("Deprecated", elements.filter { it.deprecated == true }, parentPath)
}

fun StringBuilder.appendChildrenList(title: String, elements: List<Element>, parentPath: String) {
  if (elements.isNotEmpty()) {
    appendLine("\n$title")
    appendLine(":")
    for (element in elements.sortedBy { it.name }) {
      appendHierarchyLink(element, 1, element.getPath(parentPath))
    }
  }
}

fun StringBuilder.appendExamples(examples: List<String>?) {
  if (examples == null) return
  if (examples.size == 1) {
    val example = examples.first()
    appendLine("\nExample")
    appendLine(":")
    appendLine(example.trim())
  } else if (examples.size > 1) {
    appendLine("\nExamples")
    appendLine(":")
    for (example in examples) {
      appendLine("- ${example.trim()}")
    }
  }
}

fun Element.getPath(parentPath: String): String {
  return if (parentPath == "") name!! else "${parentPath}__${name}"
}

fun String.indentLines(level: Int): String {
  return lines().joinToString(separator = "\n") { "${"  ".repeat(level)}$it" }
}

fun file(path: String): File {
  return File(System.getenv("GITHUB_WORKSPACE") ?: "../../").resolve(path).also(File::createNewFile)
}


// ============
// content data classes:

data class Content(
  var elements: List<Element> = emptyList()
)

data class Element(
  var name: String? = null,
  var deprecated: Boolean = false,
  var description: String? = null,
  var attributes: List<Attribute> = emptyList(),
  var children: List<Element> = emptyList(),
  var references: List<String> = emptyList(),
  var requirement: Requirement? = null,
  var defaultValue: String? = null,
  var examples: List<String> = emptyList()
)

data class Attribute(
  var name: String? = null,
  var required: Required = Required.NO,
  var requiredDetails: String? = null,
  var description: String? = null,
  var defaultValue: String? = null
)

data class Requirement(
  var required: Required = Required.NO,
  var details: List<String> = emptyList()
)

enum class Required {
  YES,
  NO,
  YES_FOR_PAID
}
